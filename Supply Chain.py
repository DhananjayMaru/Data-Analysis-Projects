#!/usr/bin/env python
# coding: utf-8

# In[31]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
import seaborn as sns

pio.templates.default = "plotly_white"


# In[32]:


df = pd.read_csv("supply_chain_data.csv")


# In[33]:


df


# In[34]:


#SKU#stocklevels,lead times,


# In[35]:


column_names = df.columns


# In[36]:


print(column_names)


# In[37]:


df.describe()


# In[38]:


#Now let’s get started with analyzing the Supply Chain by looking at the relationship between the price of the products and the revenue generated by them:


# In[59]:


fig = px.scatter(df,x ='Price',
                y = 'Revenue generated',
                color = 'Product type',
                hover_data = ['Number of products sold'],
                trendline = 'ols')
fig.show()   


# In[40]:


#If the OLS trendline is parallel to the x-axis, it means that there is no significant linear relationship between the two variables being plotted. In other words, the slope of the trendline is zero, which indicates that the value of the y-variable does not change as the value of the x-variable increases.

#This can occur when there is no real relationship between the variables, or when the relationship is non-linear (e.g., a quadratic or exponential relationship) and cannot be captured by a simple linear trendline. In such cases, it may be more appropriate to use a different type of plot or a more complex regression model to better capture the underlying relationship between the variables.


# In[41]:


#Thus, the company derives more revenue from skincare products, and the higher the price of skincare products, the more revenue they generate. Now let’s have a look at the sales by product type:


# In[42]:


sales_data =df.groupby('Product type')['Number of products sold'].sum().reset_index()
pie_chart = px.pie(sales_data,values = 'Number of products sold', names = 'Product type',
                  title = 'Sales by Product Type',
                  hover_data = ['Number of products sold'],
                  hole = 0.5,
                  color_discrete_sequence = px.colors.qualitative.Pastel)

pie_chart.update_traces(textposition = 'inside',textinfo ='percent+label')
pie_chart.show()


# In[43]:


#So 45% of the business comes from skincare products, 29.5% from haircare, and 25.5% from cosmetics. Now let’s have a look at the total revenue generated from shipping carriers:


# In[45]:


total_revenue = df.groupby('Shipping carriers')['Revenue generated'].sum().reset_index()
fig = go.Figure()
fig.add_trace(go.Bar(x=total_revenue['Shipping carriers'],
                     y=total_revenue['Revenue generated']))
fig.update_layout(title = 'Total Revenue by Shipping Carriers',
                 xaxis_title = 'Shipping Carrier',
                 yaxis_title='Revenue generated')
fig.show()


# In[48]:


avg_lead_time = df.groupby('Product type')['Lead time'].mean().reset_index()
avg_manufacturing_costs = df.groupby('Product type')['Manufacturing costs'].mean().reset_index()
result = pd.merge(avg_lead_time,avg_manufacturing_costs,on = 'Product type')

result.rename(columns = {'Lead time':'Average Lead Time','Manufacturing Costs':'Average Manufacturing Costs'},inplace = True)
print(result)


# ## Analyzing SKUs
# ## There’s a column in the dataset as SKUs. You must have heard it for the very first time. So, SKU stands for Stock Keeping Units. They’re like special codes that help companies keep track of all the different things they have for sale. Imagine you have a large toy store with lots of toys. Each toy is different and has its name and price, but when you want to know how many you have left, you need a way to identify them. So you give each toy a unique code, like a secret number only the store knows. This secret number is called SKU.

# In[50]:


revenue_chart = px.line(df,x='SKU',
                       y = 'Revenue generated',
                       title = 'Revenue generated by SKU')
revenue_chart.show()


# In[52]:


stock_chart = px.line(df,x='SKU',
                       y = 'Stock levels',
                       title = 'Stock Levels by SKU')
stock_chart.show()


# In[56]:


order_quantity_chart = px.bar(df,x = 'SKU',
                               y = 'Order quantities',
                               title = 'Order quantity by SKU')
order_quantity_chart.show()


# In[57]:


df.head()


# In[58]:


df.columns


# ## Cost Analysis

# In[60]:


shipping_cost_chart = px.bar(df,x= 'Shipping carriers',
                            y = 'Shipping costs',
                            title= ' Shipping costs by carriers')
shipping_cost_chart.show()


# In[70]:


df.Shipping_carriers()


# In[72]:


ship = df["Shipping carriers"]
print(ship)


# In[73]:


shipc = df["Shipping costs"]
print(shipc)


# In[74]:


df.describe()


#  ## In one of the above visualizations, we discovered that Carrier B helps the company in more revenue. It is also the most costly Carrier among the three.

# In[79]:


transportation_chart = px.pie(df,
                             values = 'Costs',
                             names= 'Transportation modes',
                             title = 'Cost Distrbution by Transportation modes',
                             hole = 0.5,
                             color_discrete_sequence=px.colors.qualitative.Pastel)
transportation_chart.show()


# ## So the company spends more on Road and Rail modes of transportation for the transportation of goods

# ## Analyzing Defect Rate
# ## The defect rate in the supply chain refers to the percentage of products that have something wrong or are found broken after shipping.

# In[84]:


defect_rates_by_product = df.groupby('Product type')['Defect rates'].mean().reset_index()
fig = px.bar(defect_rates_by_product, x = 'Product type',y = 'Defect rates',
            title = 'Average Defect Rates by Prodcut type')
fig.show()


# In[89]:


pivot_table = pd.pivot_table(df, values='Defect rates', 
                             index=['Transportation modes'], 
                             aggfunc='mean')

transportation_chart = px.pie(values=pivot_table["Defect rates"], 
                              names=pivot_table.index, 
                              title='Defect Rates by Transportation Mode',
                              hole=0.5,
                              color_discrete_sequence=px.colors.qualitative.Pastel)
transportation_chart.show()


# In[90]:


pivot_table


# In[ ]:


|

